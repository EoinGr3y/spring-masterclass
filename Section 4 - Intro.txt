

		
		Introduction to Spring Framework
	-	Spring is a dependency injection framework.
	-	Avoid tight coupling, EG. having constructors for dependencies;

		//Tight coupling
		public class ComplexBusinessService	 { 
			SortAlgorithm algorithm = new BubbleSortAlgorithm();
		}

		//Decoupled
		public class ComplexBusinessService	 { 
			SortAlgorithm algorithm;

			public ComplexBusinessService(SortAlgorithm sortAlgorithm) {
				this.algorithm = sortAlgorithm;
			}
		}

	-	Use @Component annotation to tell spring to manage instances of a class.
	-	Use @Autowired annotation to tell spring to manage a dependency of a component.

		//Spring
		@Component
		public class ComplexBusinessService	 {
			@Autowired
			SortAlgorithm algorithm;
		}

	-	Instances of components are also known as beans.

		
		Why is Spring so popular?
	-	Produces code that is easy to test, through dependency injection. Also provides good support for JUnit, Mockito and other test frameworks.
	-	No plumbing code for exception handling, xml configuration etc.
	-	Enables flexible architecture due to it's modularity. Only take the parts of Spring you need.
	-	Stays current, new projects such as Spring Cloud and Spring Boot keep spring relevent.